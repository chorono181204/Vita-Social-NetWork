//// ------------------------------------------------------
//// THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
//// ------------------------------------------------------

Table users {
  id String [pk]
  createdAt DateTime [default: `now()`, not null]
  updatedAt DateTime [not null]
  email String [unique, not null]
  username String [unique, not null]
  password String [not null]
  role Role [not null, default: 'USER']
  isVerified Boolean [not null, default: false]
  isActive Boolean [not null, default: true]
  lastLoginAt DateTime
  tokenVersion Int [not null, default: 0]
  posts posts [not null]
  profile user_profiles
  followers follows [not null]
  following follows [not null]
  likes likes [not null]
  comments comments [not null]
  saves saves [not null]
}

Table user_profiles {
  id String [pk]
  userId String [unique, not null]
  displayName String
  avatar String
  phone String
  dateOfBirth DateTime
  gender Gender
  bio String
  location String
  website String
  dietaryPreferences String[] [not null]
  cuisinePreferences String[] [not null]
  cookingLevel CookingLevel
  healthGoals String[] [not null]
  allergies String[] [not null]
  followersCount Int [not null, default: 0]
  followingCount Int [not null, default: 0]
  postsCount Int [not null, default: 0]
  user users [not null]
}

Table posts {
  id String [pk]
  createdAt DateTime [default: `now()`, not null]
  updatedAt DateTime [not null]
  type PostType [not null, default: 'STATUS']
  content Json [not null]
  title String
  difficulty Difficulty
  category RecipeCategory
  tags String[] [not null]
  cuisine String
  searchText String
  author users [not null]
  authorId String [not null]
  published Boolean [not null, default: true]
  likes likes [not null]
  comments comments [not null]
  saves saves [not null]
}

Table follows {
  id String [pk]
  createdAt DateTime [default: `now()`, not null]
  followerId String [not null]
  followingId String [not null]
  follower users [not null]
  following users [not null]

  indexes {
    (followerId, followingId) [unique]
  }
}

Table likes {
  id String [pk]
  createdAt DateTime [default: `now()`, not null]
  userId String [not null]
  postId String [not null]
  user users [not null]
  post posts [not null]

  indexes {
    (userId, postId) [unique]
  }
}

Table comments {
  id String [pk]
  createdAt DateTime [default: `now()`, not null]
  updatedAt DateTime [not null]
  content String [not null]
  userId String [not null]
  postId String [not null]
  parentId String
  user users [not null]
  post posts [not null]
  parent comments
  replies comments [not null]
}

Table saves {
  id String [pk]
  createdAt DateTime [default: `now()`, not null]
  userId String [not null]
  postId String [not null]
  user users [not null]
  post posts [not null]

  indexes {
    (userId, postId) [unique]
  }
}

Enum Role {
  ADMIN
  CHEF
  USER
}

Enum Gender {
  MALE
  FEMALE
  OTHER
}

Enum CookingLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
  EXPERT
}

Enum PostType {
  STATUS
  RECIPE
}

Enum Difficulty {
  EASY
  MEDIUM
  HARD
}

Enum RecipeCategory {
  BREAKFAST
  LUNCH
  DINNER
  DESSERT
  SNACK
  APPETIZER
  MAIN_COURSE
  SIDE_DISH
  BEVERAGE
  SALAD
  SOUP
  SAUCE
  HEALTHY
  VEGETARIAN
  VEGAN
  GLUTEN_FREE
  KETO
  LOW_CARB
}

Ref: user_profiles.userId - users.id [delete: Cascade]

Ref: posts.authorId > users.id [delete: Cascade]

Ref: follows.followerId > users.id [delete: Cascade]

Ref: follows.followingId > users.id [delete: Cascade]

Ref: likes.userId > users.id [delete: Cascade]

Ref: likes.postId > posts.id [delete: Cascade]

Ref: comments.userId > users.id [delete: Cascade]

Ref: comments.postId > posts.id [delete: Cascade]

Ref: comments.parentId - comments.id [delete: Cascade]

Ref: saves.userId > users.id [delete: Cascade]

Ref: saves.postId > posts.id [delete: Cascade]